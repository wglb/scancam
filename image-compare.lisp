;;;; image-compare.lisp

(in-package #:scancam)

#+nil (declaim (optimize (speed 0) (safety 3) (debug 3) (space 0)))

(declaim (optimize (speed 3) (safety 0) (debug 0) (space 0)))

(defparameter *same-threshold* 0.0f0)
(declaim (single-float *same-threshold*))
(defparameter *images-viewed* 0)
(declaim (fixnum *images-viewed*))

(defparameter *global-images-deleted* 0)
(declaim (fixnum *global-images-deleted*))
(defparameter *delete-these-files* nil)
(defparameter *move-files-for-real* nil)

(defun compare-images (image1 image2)
  "Determine if two images are similar"
  (let ((height1 0)
		(height2 0)
		(width1 0)
		(width2 0))
	(declare (fixnum height1 height2 width1 width2))
	(handler-case
		(with-image-from-file (img1 image1 :jpg)
		  (multiple-value-bind (width-1 height-1)
			  (image-size img1)
			(setf height1 height-1
				  width1 width-1)
			(xlogntf "ci: first size is ~s ~s " width-1 height-1)
			(debugc 5 (xlogntf "ci: first size is ~s ~s " width-1 height-1)))
		  (handler-case
			  (with-image-from-file (img2 image2 :jpg)
				(multiple-value-bind (width-2 height-2)
					(image-size img2)
				  (setf height2 height-2
						width2 width-2)
				  (if (or (not (= width1 width2))
						  (not (= height1 height2)))
					  (progn
						(error (xlogntf " widths/height different. Cain't compare "))
						(incf *errors-encountered*)))
				  
				  (debugc 5 (xlogntf "ci: first size is ~a ~a " width1 height1))
				  (debugc 5 (xlogntf "ci: second size is ~a ~a" width2 height2))
				  (let ((rgb1-diff 0)
						(rgb2-diff 0)
						(rgb3-diff 0)
						(wxh (* width1 height1)))
					(declare (fixnum rgb1-diff rgb2-diff rgb3-diff wxh))
					(dotimes (x width1)
					  (dotimes (y height1)
						(let* ((pix1 (get-pixel x y :image img1))
							   (rgb1-1 (ldb (byte 8 16) pix1))
							   (rgb2-1 (ldb (byte 8 8) pix1))
							   (rgb3-1 (ldb (byte 8 0) pix1))
							   (pix2 (get-pixel x y :image img2))
							   (rgb1-2 (ldb (byte 8 16) pix2))
							   (rgb2-2 (ldb (byte 8 8) pix2))
							   (rgb3-2 (ldb (byte 8 0) pix2)))
						  (incf rgb1-diff (abs (- rgb1-1 rgb1-2)))
						  (incf rgb2-diff (abs (- rgb2-1 rgb2-2)))
						  (incf rgb3-diff (abs (- rgb3-1 rgb3-2))))))
					(let* ((wxhf (float wxh))
						   (ans1 (/ rgb1-diff wxhf))
						   (ans2 (/ rgb2-diff wxhf))
						   (ans3 (/ rgb3-diff wxhf))
						   (ans123 (+ ans1 ans2 ans3)) 
						   (deleted (< ans123  (* 3  *same-threshold*))))
					  (declare (single-float ans1 ans1 ans3))
					  (when deleted 
						(incf *similar-images-deleted*)
						(push image2 *delete-these-files*)) ;; TODO fix this to return a value
					  
					  (incf *images-viewed* 1)
					  (incf *global-images-viewed* 1)
					  ;; previously "~a.~a ~a.~a ~10,3,f ~10,3,f ~10,3,f -> ~10,3f ~a" x
					  (xlogntf "~33a ~33a ~8,3,f ~8,3,f ~8,3,f -> ~8,3f ~a"
							   (concatenate 'string (pathname-name image1) "." (pathname-type image1))
							   (concatenate 'string (pathname-name image2) "." (pathname-type image2))
							   ans1 ans2 ans3
							   ans123
							   (if deleted
								   (format nil "delete ~a" image2)
								   ""))))))
			(error (e)
			  (incf *errors-encountered*)
			  (move-file-to-delete image2 "broken-images")
			  (xlogntf "cd: on image ~a, skipping~%error: ~a" image2 e))))
	  (error (e)
		(incf *errors-encountered*)
		(move-file-to-delete image1 "broken-images")
		(xlogntf "cd: on image ~a, skipping~%error: ~a" image1 e)))))

(defparameter *subtract-threshold* 0)
(declaim (fixnum *subtract-threshold*))

(defun subtract-images (image1 image2 )
  (let ((height1 0)
		(height2 0)
		(width1 0)
		(width2 0)
		(debug *dbg-flag*))
	(declare (fixnum height1 height2 width1 width2))
	(with-image-from-file (img1 image1 :jpg)
	  (multiple-value-bind (width-1 height-1)
		  (image-size img1)
		(setf height1 height-1
			  width1 width-1)
		(debugc 5 (xlogntf "si: first size is ~a ~a " width-1 height-1)))
	  (with-image-from-file (img2 image2 :jpg)
		(multiple-value-bind (width-2 height-2)
			(image-size img2)
		  (setf height2 height-2
				width2 width-2)
		  (if (or (not (= width1 width2))
				  (not (= height1 height2)))
			  (progn
				(error (xlogntf " widths/height different. Cain't compare ~ax~a ~ax~a " width1 width2 height1 height2))
				(incf *errors-encountered*)))
		  (let ((new-file-name (make-pathname  :directory 
											   (concatenate 'string `,(directory-namestring image1 ) "subtracted")
											   :name  (concatenate 'string `,(pathname-name image1 ) "_" `,(pathname-name image2))
											   :type  "jpg"))
				(new-file-name-attributes (make-pathname  :directory 
														  (concatenate 'string `,(directory-namestring image1 ) "subtracted-attr")
														  :name  (concatenate 'string `,(pathname-name image1 ) "_" `,(pathname-name image2))
														  :type  "lsp"))
				(max-rgb1 1)			; highly avoid divide by zero
				(max-rgb2 1)
				(max-rgb3 1))
			(declare (fixnum max-rgb1 max-rgb2 max-rgb3))
			(xlogntf "si: ~%~a ~%~a ~%~a ~%~a" image1 image2 new-file-name new-file-name-attributes)

			(ensure-directories-exist new-file-name :verbose t)
			(ensure-directories-exist new-file-name-attributes :verbose t)
			(if debug (xlogntf "si: name is ~s" new-file-name))
			(with-image (new-image width1 height1 t)
			  (declaim (fixnum width1 height1))
			  (dotimes (i +max-colors+)
				(allocate-color i i i :image new-image))
			  (dotimes (x width1)
				(dotimes (y height1)
				  (let* ((pix1 (get-pixel x y :image img1))
						 (rgb1-1 (ldb (byte 8 16) pix1))
						 (rgb2-1 (ldb (byte 8 8) pix1))
						 (rgb3-1 (ldb (byte 8 0) pix1))
						 (pix2 (get-pixel x y :image img2))
						 (rgb1-2 (ldb (byte 8 16) pix2))
						 (rgb2-2 (ldb (byte 8 8) pix2))
						 (rgb3-2 (ldb (byte 8 0) pix2))
						 (rgb1-diff (abs (- rgb1-1 rgb1-2)))
						 (rgb2-diff (abs (- rgb2-1 rgb2-2)))
						 (rgb3-diff (abs (- rgb3-1 rgb3-2))))
					(declare (fixnum pix1 rgb1-1 rgb2-1 rgb3-1 rgb1-2 rgb2-2 rgb3-2 rgb1-diff rgb2-diff rgb3-diff))
					(setf max-rgb1 (max rgb1-diff max-rgb1))
					(setf max-rgb2 (max rgb2-diff max-rgb2))
					(setf max-rgb3 (max rgb3-diff max-rgb3))
					(if debug (xlogntf "si: x,y ~3,'0d,~3,'0d colors ~3,'0d ~3,'0d ~3,'0d ~6,'0x,~6,'0x ~3d ~3d ~3d" 
									   x y rgb1-diff rgb2-diff rgb3-diff pix1 pix2
									   (floor (/ rgb1-diff 8.0)) (floor (/ rgb2-diff 8.0)) (floor (/ rgb3-diff 8.0)))))))
			  
			  (if debug (xlogntf "s1: max ~3,'0d ~3,'0d ~3,'0d" max-rgb1 max-rgb2 max-rgb3))
			  (let* ((factor1 (/ 255.0 (float max-rgb1)))
					 (factor2 (/ 255.0 max-rgb2))
					 (factor3 (/ 255.0 max-rgb3))
					 (bucket-size 32) ;; TODO cleanup this is  more global
					 (buckets (* 3 (/ 256 bucket-size)))
					 (category-array (make-array (list buckets) :initial-element 0 :element-type 'fixnum)))
				(xlogntf "si: bucket-size ~a bucket  ~a factors ~4f ~4f ~4f" bucket-size buckets factor1 factor2 factor3)
				(dotimes (x width1)
				  (dotimes (y height1)
					(let* ((pix1 (get-pixel x y :image img1))
						   (rgb1-1 (ldb (byte 8 16) pix1))
						   (rgb2-1 (ldb (byte 8 8) pix1))
						   (rgb3-1 (ldb (byte 8 0) pix1))

						   (pix2 (get-pixel x y :image img2))
						   (rgb1-2 (ldb (byte 8 16) pix2))
						   (rgb2-2 (ldb (byte 8 8) pix2))
						   (rgb3-2 (ldb (byte 8 0) pix2))
						   
						   (diff-rgb1 (abs (- rgb1-1 rgb1-2)) )
						   (diff-rgb2 (abs (- rgb2-1 rgb2-2)) )
						   (diff-rgb3 (abs (- rgb3-1 rgb3-2)) )
						   
						   (new-rgb1 (floor (* factor1 diff-rgb1)))
						   (new-rgb2 (floor (* factor2 diff-rgb2)))
						   (new-rgb3 (floor (* factor3 diff-rgb3)))
						   (category-diff (+ (floor (/ (float diff-rgb1) (float bucket-size)))
											 (floor (/ (float diff-rgb2) (float bucket-size)))
											 (floor (/ (float diff-rgb3) (float bucket-size))))) 
						   (renew-pixel #x0))
					  (declare (fixnum pix1 rgb1-1 rgb2-1 rgb3-1 pix2 rgb1-2 rgb2-2 rgb3-2 diff-rgb1 diff-rgb2 diff-rgb3 new-rgb1 new-rgb2 new-rgb3 category-diff renew-pixel ))
					  (incf (aref category-array category-diff) category-diff)
					  (setf renew-pixel (dpb diff-rgb1 (byte 8 16) renew-pixel)) 
					  (setf renew-pixel (dpb diff-rgb2 (byte 8  8) renew-pixel)) 
					  (setf renew-pixel (dpb diff-rgb3 (byte 8  0) renew-pixel)) 
					  (set-pixel x y :color renew-pixel :image new-image)
					  (if debug (xlogntf "si: pul x,y ~3,'0d,~3,'0d  pix1 ~6,'0x pix2 ~6,'0x diff ~3,'0d ~3,'0d ~3,'0d calc ~3,'0d ~3,'0d ~3,'0d : new ~6,'0x,~6,'0x" 
										 x y 
										 pix1 pix2
										 diff-rgb1 diff-rgb2 diff-rgb3 
										 new-rgb1 new-rgb2 new-rgb3
										 renew-pixel
										 (get-pixel x y :image new-image))))))
				(let* ((*print-pretty* nil)
					   (floatized (map 'list 
									   #'(lambda (x) 
										   (declare (fixnum x))
										   (/ (* 100.0f0 x) (* (float width1) (float height1))))
									   category-array))
					   (tail (reduce #'+ (subseq floatized (- buckets (1+ (/  buckets 3))))))
					   (deleted (< (float tail 1.0f0) (float *subtract-threshold* 1.0f0))))
				  (declare (float tail))
				  
				  (xlogntf "si: category ~a ~{~5f ~}"
						   (if deleted 
							   "*disc*"
							   "*keep*")
						   floatized)
				  (when deleted 
					(incf (the fixnum *subtracted-images-deleted*))
					(push image1 *delete-these-files*))
				  (with-open-file (fo new-file-name-attributes :direction :output :if-exists :append :if-does-not-exist :create)
					(write (list tail buckets bucket-size category-array floatized) :stream fo))
				  (xlogntf "s1: tail ~a" tail)))
			  (write-image-to-file new-file-name :image new-image :if-exists :supersede)))
		  )))))

#+nil (defun calc-average-debug (fn)
  (xlogntf "cad: calcing on ~a size ~a" (probe-file fn) (sb-posix:stat-size (sb-posix:stat fn)))
  (with-image-from-file (img fn :jpg)
		(multiple-value-bind (width height)
			(image-size img)
		  (let ((sum 0)
				(deltas 0)
				(rgb1-sum 0)
				(rgb2-sum 0)
				(rgb3-sum 0)
				(wxh (* width height)))
			(dotimes (x width)
			  (dotimes (y height)
				(let ((pix (get-pixel x y :image img)))
				  (let* ((rgb1 (ldb (byte 8 16) pix))
						 (rgb2 (ldb (byte 8 8) pix))
						 (rgb3 (ldb (byte 8 0) pix))
						 (bright (/ (+ rgb1
									   rgb2
									   rgb3)
									3.0))
						 (delta (abs (+ (abs (- bright rgb1))
										(abs (- bright rgb2))
										(abs (- bright rgb3))))))
					;; delta is per-pixel deviation
					(incf rgb1-sum rgb1)
					(incf rgb2-sum rgb2)
					(incf rgb3-sum rgb3)					
					(incf sum bright)
					(incf deltas delta)))))
			(let* ((avg (/ sum wxh 1.0))
				   (delts (/ deltas wxh 1.0))
				   (rgb1a (/ rgb1-sum wxh 1.0))
				   (rgb2a (/ rgb2-sum wxh 1.0))
				   (rgb3a (/ rgb3-sum wxh 1.0))
				   (delta-right 0.0d0)
				   (delta-down 0.0d0)
				   (total-delta 0.0d0))
			  (dotimes (x (1- width))
				(dotimes (y (1- height))
				  (let* ((pix (get-pixel x y :image img))
						 (pixr (get-pixel (1+ x) y :image img))
						 (pixd (get-pixel x (1+ y) :image img))
						 (rgb1 (ldb (byte 8 16) pix))
						 (rgb2 (ldb (byte 8 8) pix))
						 (rgb3 (ldb (byte 8 0) pix))
						 (rgb1r (ldb (byte 8 16) pixr))
						 (rgb2r (ldb (byte 8 8) pixr))
						 (rgb3r (ldb (byte 8 0) pixr))
						 (rgb1d (ldb (byte 8 16) pixd))
						 (rgb2d (ldb (byte 8 8) pixd ))
						 (rgb3d (ldb (byte 8 0) pixd )))
					(incf delta-right (+ (abs (- rgb1 rgb1r)) (abs (- rgb2 rgb2r)) (abs (- rgb3 rgb3r))))
					(incf delta-down (+ (abs (- rgb1 rgb1d)) (abs (- rgb2 rgb2d)) (abs (- rgb3 rgb3d)))))))
			  (setf total-delta (+ delta-right delta-down))
			  (list avg delts rgb1a rgb2a rgb3a (/ delta-right wxh) (/ delta-down wxh) (/ total-delta wxh) wxh sum))))))

(defun calc-average (fn)
  "answer (list average delta <three colors>)"
  (debugc 5 (xlogntf "ca: calcing on ~a" (probe-file fn)))
  (handler-case
	  (with-image-from-file (img fn :jpg)
		(multiple-value-bind (width height)
			(image-size img)
		  (let ((sum 0)
				(deltas 0)
				(rgb1-sum 0)
				(rgb2-sum 0)
				(rgb3-sum 0)
				(wxh (* (the fixnum width) (the fixnum height))))
			(declare (fixnum sum deltas wxh  rgb1-sum rgb2-sum rgb3-sum #+nil width #+nil height))
			(dotimes (x width)
			  (dotimes (y height)
				(let ((pix (get-pixel x y :image img)))
				  (let* ((rgb1 (ldb (byte 8 16) pix))
						 (rgb2 (ldb (byte 8 8) pix))
						 (rgb3 (ldb (byte 8 0) pix))
						 (bright (floor (+ rgb1 rgb2 rgb3)
										3.0f0))
						 (delta (abs (+ (abs (- bright rgb1))
										(abs (- bright rgb2)) 
										(abs (- bright rgb3))))))
					(declare (fixnum delta))
					
					;; delta is per-pixel deviation
					(incf rgb1-sum rgb1)
					(incf rgb2-sum rgb2)
					(incf rgb3-sum rgb3)					
					(incf sum bright)
					(incf deltas delta)))))
			(let* ((avg (/ sum wxh))
				   (delts (/ deltas wxh))
				   (rgb1a (/ rgb1-sum wxh))
				   (rgb2a (/ rgb2-sum wxh))
				   (rgb3a (/ rgb3-sum wxh))
				   (delta-right 0)
				   (delta-down 0)
				   (total-delta 0))
			  (declare (fixnum delta-right delta-down total-delta))
			  (dotimes (x (1- width))
				(dotimes (y (1- height))
				  (let* ((pix (get-pixel x y :image img))
						 (pixr (get-pixel (1+ x) y :image img))
						 (pixd (get-pixel x (1+ y) :image img))
						 (rgb1 (ldb (byte 8 16) pix))
						 (rgb2 (ldb (byte 8 8) pix))
						 (rgb3 (ldb (byte 8 0) pix))
						 (rgb1r (ldb (byte 8 16) pixr))
						 (rgb2r (ldb (byte 8 8) pixr))
						 (rgb3r (ldb (byte 8 0) pixr))
						 (rgb1d (ldb (byte 8 16) pixd))
						 (rgb2d (ldb (byte 8 8) pixd ))
						 (rgb3d (ldb (byte 8 0) pixd )))
					(declare (fixnum pix pixr pixd rgb1 rgb2 rgb3 rgb1r rgb2r rgb3r rgb1d rgb2d rgb3d ))
					(incf delta-right (the fixnum (+ 
												   (abs (- rgb1 rgb1r))
												   (abs (- rgb2 rgb2r))
												   (abs (- rgb3 rgb3r)))))
					(incf delta-down (+ 
									  (abs (- rgb1 rgb1d))
									  (abs (- rgb2 rgb2d))
									  (abs (- rgb3 rgb3d)))))))
			  (setf total-delta (+ delta-right delta-down))
			  (list avg delts rgb1a rgb2a rgb3a (/ delta-right wxh) (/ delta-down wxh) (/ total-delta wxh) wxh sum)))))
	(error (e)
	  (xlogntft "ca: error: library does not like ~A, size ~a" (probe-file fn)   e)
	  (xlogff "prepare for oops")
	  (move-file-to-delete fn "broken-images")
	  (incf *errors-encountered*)
	  nil)))

#+nil (defun get-average-check (fn)
  "answer (list average delta <three colors>)"
  (handler-case
	  (with-image-from-file (img fn :jpg)
		(multiple-value-bind (width height)
			(image-size img)
		  (let ((sum 0)
				(deltas 0)
				(rgb1-sum 0)
				(rgb2-sum 0)
				(rgb3-sum 0)
				(wxh (* (the fixnum width) (the fixnum height))))
			(declare (fixnum width height wxh))
			(dotimes (x width)
			  (dotimes (y height)
				(let ((pix (get-pixel x y :image img)))
				  (let* ((rgb1 (ldb (byte 8 16) pix))
						 (rgb2 (ldb (byte 8 8) pix))
						 (rgb3 (ldb (byte 8 0) pix))
						 (bright (/ (+ rgb1
									   rgb2
									   rgb3)
									3.0))
						 (delta (abs (+ (abs (- bright rgb1))
										(abs (- bright rgb2))
										(abs (- bright rgb3))))))
					;; delta is per-pixel deviation
					(incf rgb1-sum rgb1)
					(incf rgb2-sum rgb2)
					(incf rgb3-sum rgb3)					
					(incf sum bright)
					(incf deltas delta)))))
			(let* ((avg (/ sum wxh 1.0))
				   (delts (/ deltas wxh 1.0))
				   (rgb1a (/ rgb1-sum wxh 1.0))
				   (rgb2a (/ rgb2-sum wxh 1.0))
				   (rgb3a (/ rgb3-sum wxh 1.0))
				   (rgb1-delta 0.0d0)
				   (rgb2-delta 0.0d0)
				   (rgb3-delta 0.0d0))
			  (dotimes (x width)
				(dotimes (y height)
				  (let* ((pix (get-pixel x y :image img))
						 (rgb1 (ldb (byte 8 16) pix))
						 (rgb2 (ldb (byte 8 8) pix))
						 (rgb3 (ldb (byte 8 0) pix)))
					(incf rgb1-delta (* (- rgb1 rgb1a) (- rgb1 rgb1a)))
					(incf rgb2-delta (* (- rgb2 rgb2a) (- rgb2 rgb2a)))
					(incf rgb3-delta (* (- rgb3 rgb3a) (- rgb3 rgb3a))))))
			  (list avg delts rgb1a rgb2a rgb3a (sqrt (/ rgb1-delta wxh)) (sqrt (/ rgb2-delta wxh)) (sqrt (/ rgb3-delta wxh)) wxh sum)))))
	(error (e)
	  (xlogntf "ga: error: library does not like ~A  size ~a, ~%error says ~a" (probe-file fn) (sb-posix:stat-size (sb-posix:stat fn)) e)
	  (xlogff "prepare for oops")
	  (move-file-to-delete fn "broken-images")
	  (incf *errors-encountered*)
	  nil))) 

(defun test-subtract (f1 f2)
  (subtract-images f1 f2))

(defun test-subtract-dir (dir f1 f2)
  (with-open-log-file ("test-sub" :dates :hms :dir dir)
	(subtract-images (concatenate 'string dir f1) (concatenate 'string dir f2))))

(defun subtract-dir (dir)
  "Used only from the command line"
  (setf *subtracted-images-deleted* 0) ;; TODO if we do archive, move this reset.
  (with-open-log-file ("test-many-sub" :dates :hms :dir dir)
	(setf *subtract-threshold* (get-config-rescan dir :subtract))
	(xlogntf "sd: threshold=~a" *subtract-threshold*)
	(let ((*trace-output* (the-log-file)))
	  (time
	   (let* ((files (directory (concatenate 'string dir "*.jpg")))
			  (top (first files)))
		 (dolist (ni (cdr files))
		   (subtract-images top ni)
		   (setf top ni))
		 (delete-files-from-list *delete-these-files* "delete-subtract")
		 (xlogntft "sd: deleted ~a subtract images " *subtracted-images-deleted*))))))

(defun subtract-dir-new (args)
  (cond ((null args)
		 (subtract-dir *directory*))
		(t (xlogntf "subtract-dir-new: Unexpected args. Processing halted ~s" args))))

(defun delete-files-from-list (delete-these-files &optional (del-folder "delete-similar") ) ;; TODO parameter to say target directory, parameter for list
  (dolist (ix delete-these-files)
	;; (curpath (pathname-directory ix))
	(incf *global-images-deleted*)
	(move-file-to-delete ix del-folder)))

(defun global-init (dir)
  (setf *global-images-deleted* 0)
  (setf *global-images-viewed* 0)
  (prog2 
	  (collect-year dir)
	  (xlogntf "overall, deleted ~a files" *global-images-deleted*)))

(defun init-compare (dir)
  (setf *same-threshold*
		(get-config-rescan (probe-file dir) :sameness))
  (xlogntf "ic: sameness thresh ~a" *same-threshold*)
  (setf  *images-viewed* 0)
  (setf  *similar-images-deleted* 0)
  (setf  *delete-these-files* nil))

(defun compare-images-test-different ()
  (let  ((one (car (last (directory "/home/data6/webcams/pendroy/scancam/pendroy/*.jpg" ))))
		 (two (car (last (directory "/home/data6/webcams/pendroy/scancam/greenough-hill/*.jpg")))))
	(xlogntf "first ~a second ~a" one two)
	(compare-images one two)))

(defun compare-last-two (&optional (dir "/home/data6/webcams/pendroy/scancam/pendroy/"))
  (let*  ((mp (merge-pathnames dir "*.jpg"))
		  (full  (directory mp))
		  (one (car (last full)))
		  (two (car (butlast full))))
	(compare-images one two)
	(xlogntf "Now, the same image")
	(compare-images one one)))


